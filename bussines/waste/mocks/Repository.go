// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	waste "wastebank-ca/bussines/waste"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() (*[]waste.DomainWaste, error) {
	ret := _m.Called()

	var r0 *[]waste.DomainWaste
	if rf, ok := ret.Get(0).(func() *[]waste.DomainWaste); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]waste.DomainWaste)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetData provides a mock function with given fields: id, name
func (_m *Repository) GetData(id int, name string) (*waste.DomainWaste, error) {
	ret := _m.Called(id, name)

	var r0 *waste.DomainWaste
	if rf, ok := ret.Get(0).(func(int, string) *waste.DomainWaste); ok {
		r0 = rf(id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waste.DomainWaste)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *Repository) Insert(_a0 *waste.DomainWaste) (*waste.DomainWaste, error) {
	ret := _m.Called(_a0)

	var r0 *waste.DomainWaste
	if rf, ok := ret.Get(0).(func(*waste.DomainWaste) *waste.DomainWaste); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waste.DomainWaste)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waste.DomainWaste) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 *waste.DomainWaste) (*waste.DomainWaste, error) {
	ret := _m.Called(_a0)

	var r0 *waste.DomainWaste
	if rf, ok := ret.Get(0).(func(*waste.DomainWaste) *waste.DomainWaste); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waste.DomainWaste)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waste.DomainWaste) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
