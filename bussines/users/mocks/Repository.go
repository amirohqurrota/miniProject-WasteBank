// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "wastebank-ca/bussines/users"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetData provides a mock function with given fields: id, firstName, lastName, username
func (_m *Repository) GetData(id int, firstName string, lastName string, username string) (*users.Domain, error) {
	ret := _m.Called(id, firstName, lastName, username)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(int, string, string, string) *users.Domain); ok {
		r0 = rf(id, firstName, lastName, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, string) error); ok {
		r1 = rf(id, firstName, lastName, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: user
func (_m *Repository) Insert(user *users.Domain) (*users.Domain, error) {
	ret := _m.Called(user)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(*users.Domain) *users.Domain); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.Domain) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *Repository) Update(user *users.Domain) (*users.Domain, error) {
	ret := _m.Called(user)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(*users.Domain) *users.Domain); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.Domain) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSaldo provides a mock function with given fields: id, saldo
func (_m *Repository) UpdateSaldo(id int, saldo int) (*users.Domain, error) {
	ret := _m.Called(id, saldo)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(int, int) *users.Domain); ok {
		r0 = rf(id, saldo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, saldo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
